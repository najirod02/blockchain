{
	"compiler": {
		"version": "0.8.26+commit.8a97fa7a"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "a",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "b",
						"type": "uint256"
					}
				],
				"name": "average",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "a",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "b",
						"type": "uint256"
					}
				],
				"name": "max",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "a",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "b",
						"type": "uint256"
					}
				],
				"name": "min",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {},
			"notice": "rememebr that libraries has no state there is no float nor double data type in order to maintain security and  determinism in smart contracts. a possible solution is to use scaled integers to encode float values e.g: instead of 1.23, we write 123 and when needed we just divide by 100.",
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/es5/Math2Num.sol": "Math2Num"
		},
		"evmVersion": "cancun",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"contracts/es5/Math2Num.sol": {
			"keccak256": "0x4807dd3e63fc7050a288942d6f62ec1110e328a482a8a3918391166af3719ad5",
			"license": "MIT",
			"urls": [
				"bzz-raw://d116643803c0912d677080d1bacb36dac3bb416b8f5a3339ee27dcc24d311386",
				"dweb:/ipfs/QmUpqTs7wGnWPj7aWKGDCU95gQ2SqqiBnvVafAwjZJaJ1c"
			]
		}
	},
	"version": 1
}